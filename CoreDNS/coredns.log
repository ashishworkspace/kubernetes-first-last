[ashish@localhost ~]$ k describe configmap coredns -n kube-system
Name:         coredns
Namespace:    kube-system
Labels:       <none>
Annotations:  <none>

Data
====
Corefile:
----
.:53 {
    errors
    health {
       lameduck 5s
    }
    ready
    kubernetes cluster.local in-addr.arpa ip6.arpa {
       pods insecure
       fallthrough in-addr.arpa ip6.arpa
       ttl 30
    }
    prometheus :9153
    forward . /etc/resolv.conf {
       max_concurrent 1000
    }
    cache 30
    loop
    reload
    loadbalance
}


BinaryData
====

Events:  <none>














[ashish@localhost ~]$ k get deployment -n kube-system
NAME      READY   UP-TO-DATE   AVAILABLE   AGE
coredns   2/2     2            2           2d12h
[ashish@localhost ~]$ k describe  deployment coredns -n kube-system
Name:                   coredns
Namespace:              kube-system
CreationTimestamp:      Thu, 24 Feb 2022 09:56:57 +0530
Labels:                 k8s-app=kube-dns
Annotations:            deployment.kubernetes.io/revision: 1
Selector:               k8s-app=kube-dns
Replicas:               2 desired | 2 updated | 2 total | 2 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  1 max unavailable, 25% max surge
Pod Template:
  Labels:           k8s-app=kube-dns
  Service Account:  coredns
  Containers:
   coredns:
    Image:       k8s.gcr.io/coredns/coredns:v1.8.0
    Ports:       53/UDP, 53/TCP, 9153/TCP
    Host Ports:  0/UDP, 0/TCP, 0/TCP
    Args:
      -conf
      /etc/coredns/Corefile
    Limits:
      memory:  170Mi
    Requests:
      cpu:        100m
      memory:     70Mi
    Liveness:     http-get http://:8080/health delay=60s timeout=5s period=10s #success=1 #failure=5
    Readiness:    http-get http://:8181/ready delay=0s timeout=1s period=10s #success=1 #failure=3
    Environment:  <none>
    Mounts:
      /etc/coredns from config-volume (ro)
  Volumes:
   config-volume:
    Type:               ConfigMap (a volume populated by a ConfigMap)
    Name:               coredns
    Optional:           false
  Priority Class Name:  system-cluster-critical
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Progressing    True    NewReplicaSetAvailable
  Available      True    MinimumReplicasAvailable
OldReplicaSets:  <none>
NewReplicaSet:   coredns-558bd4d5db (2/2 replicas created)
Events:          <none>














[ashish@localhost ~]$ k get  deployment coredns -n kube-system -o --dry-run -o yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: "2022-02-24T04:26:57Z"
  generation: 1
  labels:
    k8s-app: kube-dns
  name: coredns
  namespace: kube-system
  resourceVersion: "127978"
  uid: ca80e52c-7e06-47aa-8fe4-532d3209d30c
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: kube-dns
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        k8s-app: kube-dns
    spec:
      containers:
      - args:
        - -conf
        - /etc/coredns/Corefile
        image: k8s.gcr.io/coredns/coredns:v1.8.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: coredns
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        - containerPort: 9153
          name: metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: 8181
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            memory: 170Mi
          requests:
            cpu: 100m
            memory: 70Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - all
          readOnlyRootFilesystem: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/coredns
          name: config-volume
          readOnly: true
      dnsPolicy: Default
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-cluster-critical
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: coredns
      serviceAccountName: coredns
      terminationGracePeriodSeconds: 30
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: Corefile
            path: Corefile
          name: coredns
        name: config-volume
status:
  availableReplicas: 2
  conditions:
  - lastTransitionTime: "2022-02-24T04:27:07Z"
    lastUpdateTime: "2022-02-24T04:27:42Z"
    message: ReplicaSet "coredns-558bd4d5db" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  - lastTransitionTime: "2022-02-26T03:17:16Z"
    lastUpdateTime: "2022-02-26T03:17:16Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  observedGeneration: 1
  readyReplicas: 2
  replicas: 2
  updatedReplicas: 2
  













[ashish@localhost ~]$ k create ns first
namespace/first created

[ashish@localhost ~]$ k create ns second
namespace/second created

[ashish@localhost ~]$ k create deployment httpd-f --image=httpd -n first
deployment.apps/httpd-f created

[ashish@localhost ~]$ k scale deployment httpd-f --replicas=2 -n first
deployment.apps/httpd-f scaled

[ashish@localhost ~]$ k expose deployment httpd-f --port=80 --type=NodePort -n first
service/httpd-f exposed

[ashish@localhost ~]$ k create deployment httpd-s --image=httpd --replicas=3 -n second
deployment.apps/httpd-s created

[ashish@localhost ~]$ k expose deployment httpd-s --port=80 --type=NodePort -n second
service/httpd-s exposed


[ashish@localhost ~]$ k get pods -n second
NAME                       READY   STATUS    RESTARTS   AGE
httpd-s-5c494dcd96-kxs76   1/1     Running   0          66s
httpd-s-5c494dcd96-plr89   1/1     Running   0          66s
httpd-s-5c494dcd96-z2sk6   1/1     Running   0          


[ashish@localhost ~]$ k get pod -n first
NAME                      READY   STATUS    RESTARTS   AGE
httpd-f-b54b6c85c-4tx47   1/1     Running   0          2m31s
httpd-f-b54b6c85c-lmg8m   1/1     Running   0          2m54s


[ashish@localhost ~]$ k get svc -n second
NAME      TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
httpd-s   NodePort   10.96.192.75   <none>        80:30041/TCP   25s


[ashish@localhost ~]$ k get svc -n first
NAME      TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
httpd-f   NodePort   10.96.245.137   <none>        80:30712/TCP   117s


[ashish@localhost ~]$ k exec -n second -it httpd-s-5c494dcd96-kxs76 -- bash
root@httpd-s-5c494dcd96-kxs76:/usr/local/apache2# cat /etc/resolv.conf
search second.svc.cluster.local svc.cluster.local cluster.local localdomain
nameserver 10.96.0.10
options ndots:5
root@httpd-s-5c494dcd96-kxs76:/usr/local/apache2# exit
exit


[ashish@localhost ~]$ k get svc -n kube-system
NAME       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE
kube-dns   ClusterIP   10.96.0.10   <none>        53/UDP,53/TCP,9153/TCP   2d13h

